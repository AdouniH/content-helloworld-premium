id: HelloWorldPremium_Scan
version: -1
vcShouldKeepItemLegacyProdMachine: false
name: HelloWorldPremium_Scan
description: |-
  This Playbook simulates a vulnerability scan using the "HelloWorld" sample integration. It's used to demonstrate how to use the GenericPolling mechanism to run jobs that take several seconds or minutes to complete. It is designed to be used as a subplaybook, but you can also use it as a standalone playbook, by providing the ${Endpoint.Hostname} input in the Context.

  Other inputs include the report output format (JSON context or File attached), and the Interval/Timeouts to use for polling the scan status until it's complete.
starttaskid: "0"
tasks:
  "0":
    id: "0"
    taskid: e2b99a8f-4096-43fa-8a6c-c9e7a9fefb90
    type: start
    task:
      id: e2b99a8f-4096-43fa-8a6c-c9e7a9fefb90
      version: -1
      name: ""
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "5"
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 265,
          "y": 50
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "1":
    id: "1"
    taskid: 8cf34007-6e6f-43e8-875e-b761ce95b092
    type: regular
    task:
      id: 8cf34007-6e6f-43e8-875e-b761ce95b092
      version: -1
      name: Start a Hello World Premium Scan
      description: Start a HelloWorldPremium scan on an asset, identified from by
        ${input.Hostname} key.
      script: '|||helloworldpremium-scan-start'
      type: regular
      iscommand: true
      brand: ""
    nexttasks:
      '#none#':
      - "2"
    scriptarguments:
      hostname:
        simple: ${inputs.Hostname}
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 50,
          "y": 370
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "2":
    id: "2"
    taskid: 2a96be24-7bbd-41a7-86ab-1fde7b2403e5
    type: playbook
    task:
      id: 2a96be24-7bbd-41a7-86ab-1fde7b2403e5
      version: -1
      name: GenericPolling
      description: |-
        Use this playbook as a sub-playbook to block execution of the master playbook until a remote action is complete.
        This playbook implements polling by continuously running the command in Step \#2 until the operation completes.
        The remote action should have the following structure:

        1. Initiate the operation.
        2. Poll to check if the operation completed.
        3. (optional) Get the results of the operation.
      playbookName: GenericPolling
      type: playbook
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "3"
    scriptarguments:
      AdditionalPollingCommandArgNames: {}
      AdditionalPollingCommandArgValues: {}
      Ids:
        simple: ${HelloWorldPremium.Scan.scan_id}
      Interval:
        simple: ${inputs.Interval}
      PollingCommandArgName:
        simple: scan_id
      PollingCommandName:
        simple: helloworldpremium-scan-status
      Timeout:
        simple: ${inputs.Timeout}
      dt:
        simple: HelloWorldPremium.Scan(val.status !== 'COMPLETE').scan_id
    separatecontext: true
    loop:
      iscommand: false
      exitCondition: ""
      wait: 1
      max: 100
    view: |-
      {
        "position": {
          "x": 50,
          "y": 545
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "3":
    id: "3"
    taskid: 0cb81d32-ceab-4cf6-82da-363247181f8e
    type: regular
    task:
      id: 0cb81d32-ceab-4cf6-82da-363247181f8e
      version: -1
      name: Retrieve HelloWorldPremium Scan Results
      description: Retrieve scan status in Context or as a File (default) for a Scan.
      script: '|||helloworldpremium-scan-results'
      type: regular
      iscommand: true
      brand: ""
    nexttasks:
      '#none#':
      - "4"
    scriptarguments:
      format:
        simple: ${inputs.Report Format}
      scan_id:
        simple: ${HelloWorldPremium.Scan.scan_id}
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 50,
          "y": 720
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "4":
    id: "4"
    taskid: 5e1a7435-601a-445a-83dd-368f5227d4f5
    type: title
    task:
      id: 5e1a7435-601a-445a-83dd-368f5227d4f5
      version: -1
      name: Done
      type: title
      iscommand: false
      brand: ""
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 265,
          "y": 895
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "5":
    id: "5"
    taskid: 619eeca1-ae83-4889-8150-328517a630ad
    type: condition
    task:
      id: 619eeca1-ae83-4889-8150-328517a630ad
      version: -1
      name: Is Hostname set?
      description: Check if the input Hostname is valid (i.e. is not Empty), do not
        run the scan otherwise.
      type: condition
      iscommand: false
      brand: ""
    nexttasks:
      '#default#':
      - "6"
      "true":
      - "1"
    separatecontext: false
    conditions:
    - label: "true"
      condition:
      - - operator: isNotEmpty
          left:
            value:
              simple: inputs.Hostname
            iscontext: true
    view: |-
      {
        "position": {
          "x": 265,
          "y": 195
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "6":
    id: "6"
    taskid: 832ff0af-b30c-49b3-8f2a-9e55261913c7
    type: regular
    task:
      id: 832ff0af-b30c-49b3-8f2a-9e55261913c7
      version: -1
      name: Print Error
      description: Prints an error entry with a given message
      scriptName: PrintErrorEntry
      type: regular
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "4"
    scriptarguments:
      message:
        simple: Hostname is not set, cannot run the playbook!
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 480,
          "y": 720
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
view: |-
  {
    "linkLabelsPosition": {},
    "paper": {
      "dimensions": {
        "height": 910,
        "width": 810,
        "x": 50,
        "y": 50
      }
    }
  }
inputs:
- key: Hostname
  value:
    complex:
      root: ${Endpoint
      accessor: Hostname}
  required: true
  description: Hostname to run the scan against. By default takes ${Endpoint.Hostname}
    from the context as the input.
  playbookInputQuery: null
- key: Report Format
  value:
    simple: json
  required: true
  description: 'Output report format: can be "json" (output parsed and written in
    the Context) or "file" (saved as an attachment). By default is "json".'
  playbookInputQuery: null
- key: Interval
  value:
    simple: "1"
  required: true
  description: How often to check for the scan to be completed (minutes)
  playbookInputQuery: null
- key: Timeout
  value:
    simple: "15"
  required: true
  description: How long to wait for the scan to be completed before timing out (minutes)
  playbookInputQuery: null
outputs:
- contextPath: HelloWorldPremium.Scan.entity.entity-id
  description: Scanned entity ID.
- contextPath: HelloWorldPremium.Scan.entity.ip_address
  description: Scanned entity IP address.
- contextPath: HelloWorldPremium.Scan.entity.type
  description: Scanned entity type.
- contextPath: HelloWorldPremium.Scan.entity.vulnerability_status
  description: Scanned entity vulnerability status.
- contextPath: HelloWorldPremium.Scan.entity.vulns
  description: Scanned entity CVE.
- contextPath: CVE.ID
  description: The ID of the CVE.
- contextPath: InfoFile.EntryID
  description: The EntryID of the report file.
- contextPath: InfoFile.Extension
  description: The extension of the report file.
- contextPath: InfoFile.Name
  description: The name of the report file.
- contextPath: InfoFile.Info
  description: The info of the report file.
- contextPath: InfoFile.Size
  description: The size of the report file.
- contextPath: InfoFile.Type
  description: The type of the report file.
fromversion: 5.0.0
tests:
 -  No tests
